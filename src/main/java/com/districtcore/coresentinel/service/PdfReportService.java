package com.districtcore.coresentinel.service;

import com.districtcore.coresentinel.util.pdf.HeaderFooterEventHandler;
import com.districtcore.coresentinel.util.pdf.PdfBuilder;
import com.districtcore.coresentinel.util.pdf.PdfUtils;
import com.districtcore.coresentinel.util.pdf.Report.*;
import com.districtcore.coresentinel.util.pdf.TableBuilder;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@Scope("prototype")
public class PdfReportService {

    private PdfBuilder pdfBuilder;
    private final PdfReportFetcherService fetcherService;

    public PdfReportService(PdfReportFetcherService fetcherService) throws Exception {
        this.fetcherService = fetcherService;
    }

    public byte[] generateReport(Long caseId, Long currentUserId) throws Exception {
        pdfBuilder = PdfUtils.createPdfBuilder();
        HeaderFooterEventHandler handler = new HeaderFooterEventHandler();
        pdfBuilder.addStartPageEvent(handler);

        createMetaData(fetcherService.fetchMetadata(caseId, currentUserId));
        createCaseDetails(fetcherService.fetchCaseDetails(caseId));
        createEvidence(fetcherService.fetchTextEvidence(caseId), fetcherService.fetchImageEvidence(caseId));
        createInvolvedPeople(fetcherService.fetchPersons(caseId), fetcherService.fetchOfficers(caseId));

        pdfBuilder.removeEventHandler(handler);
        return pdfBuilder.build();
    }

    public void createMetaData(ReportMetaData metaData) {
        pdfBuilder.addTitle("CoreSentinel Crime Report");

        TableBuilder table = PdfUtils.createTableBuilder(new float[]{2, 3});
        table.addMainCenteredHeader("Report Information")
                .addMainCenteredRow(new String[]{"Case ID", metaData.getCaseId()})
                        .addMainCenteredRow(new String[]{"Generated By", metaData.getGeneratedBy()})
                                .addMainCenteredRow(new String[]{"Generated On", metaData.getGeneratedOn()})
                                        .addMainCenteredRow(new String[]{"Version", Double.toString(metaData.getVersion())});
        pdfBuilder.addTable(table);
    }

    public void createCaseDetails(ReportCaseDetails caseDetails) {
        pdfBuilder.addSectionTitle("Case Details");
        pdfBuilder.addSubsectionTitle("Case Description");
        pdfBuilder.addNormalParagraph(caseDetails.getDescription());

        pdfBuilder.addSubsectionTitle("Case Information");
        TableBuilder table = PdfUtils.createTableBuilder(new float[]{2, 3});
        table.addMainCenteredHeader("Case Information")
                .addRow(new String[]{"Name", caseDetails.getName()})
                                .addRow(new String[]{"Status", caseDetails.getStatus().toString()})
                                        .addRow(new String[]{"Date", caseDetails.getDate()})
                                                .addRow(new String[]{"Level", caseDetails.getLevel().toString()})
                                                        .addRow(new String[]{"City", caseDetails.getCity()})
                                                                .addRow(new String[]{"Area", caseDetails.getArea()})
                                                                        .addRow(new String[]{"Creator", caseDetails.getCreator()});
        pdfBuilder.addTable(table);
    }

    public void createEvidence(List<ReportTextEvidence> textEvidence, List<ReportImageEvidence> imageEvidence) {
        pdfBuilder.addSectionTitle("Crime Evidence");
        createTextEvidence(textEvidence);
        createImageEvidence(imageEvidence);
    }

    public void createTextEvidence(List<ReportTextEvidence> textEvidence) {
        pdfBuilder.addSubsectionTitle("Text Based Evidence");

        TableBuilder evidence = PdfUtils.createTableBuilder(new float[]{1, 5, 3, 3, 3});

        evidence.addHeaderRow(
                new String[]{"No", "Evidence", "Remarks", "Uploaded By", "Uploaded At"}
        );

        int idx = 1;
        for (ReportTextEvidence pieceOfEvidence : textEvidence) {
            evidence.addRow(new String[]{
                            String.valueOf(idx),
                            pieceOfEvidence.getEvidence(),
                            pieceOfEvidence.getRemarks() == null ? "N/A" : pieceOfEvidence.getRemarks(),
                            pieceOfEvidence.getUploadedBy(),
                            pieceOfEvidence.getUploadedAt()});
            idx++;
        }
        pdfBuilder.addTable(evidence);
    }

    public void createImageEvidence(List<ReportImageEvidence> imageEvidence) {
        pdfBuilder.addSubsectionTitle("Image Based Evidence");

        TableBuilder table = PdfUtils.createTableBuilder(new float[]{1})
                .addTableWidth(450);

        for (ReportImageEvidence pieceOfEvidence : imageEvidence) {
            table.addImageWithOverlay(
                    pdfBuilder.getDocument(),
                    pieceOfEvidence.getEvidence(),
                    "By " + pieceOfEvidence.getUploadedBy() + " at " + pieceOfEvidence.getUploadedAt());

            if (pieceOfEvidence.getRemarks() != null) {
                table.addFullGrayRow("Remarks: " + pieceOfEvidence.getRemarks());
            }
        }
        pdfBuilder.addTable(table);
    }

    public void createInvolvedPeople(List<ReportPersons> persons, List<ReportOfficer> officers) {
        pdfBuilder.addSectionTitle("Involved People");
        createAssociatedPeople(persons);
        createAssignedOfficers(officers);
    }

    public void createAssociatedPeople(List<ReportPersons> persons) {
        pdfBuilder.addSubsectionTitle("Associated People");
        TableBuilder table = PdfUtils.createTableBuilder(new float[]{1, 2, 2, 2, 2})
                .addTableWidth(450);

        table.addHeaderRow(
                new String[] {
                        "No", "Name", "Gender", "Age", "Type"
                }
        );

        int idx = 1;
        for (ReportPersons person : persons) {

            table.addRow(new String[]{
                    String.valueOf(idx),
                    person.getName(),
                    person.getGender().toString(),
                    person.getAge().toString(),
                    person.getType().toString()
            });
            idx++;
        }
        pdfBuilder.addTable(table);
    }

    public void createAssignedOfficers(List<ReportOfficer> officers) {
        pdfBuilder.addSubsectionTitle("Assigned Officers");
        TableBuilder table = PdfUtils.createTableBuilder(new float[]{1, 2, 2})
                .addTableWidth(450);

        table.addHeaderRow(
                new String[] {
                        "No", "Name", "Email"
                }
        );

        int idx = 1;
        for (ReportOfficer officer : officers) {

            table.addRow(new String[]{
                    String.valueOf(idx),
                    officer.getName(),
                    officer.getEmail()
            });
            idx++;
        }
        pdfBuilder.addTable(table);
    }

}